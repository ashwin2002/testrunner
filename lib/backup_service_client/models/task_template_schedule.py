# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TaskTemplateSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_type': 'str',
        'frequency': 'int',
        'period': 'str',
        'time': 'str',
        'start_now': 'bool'
    }

    attribute_map = {
        'job_type': 'job_type',
        'frequency': 'frequency',
        'period': 'period',
        'time': 'time',
        'start_now': 'start_now'
    }

    def __init__(self, job_type=None, frequency=None, period=None, time=None, start_now=None):  # noqa: E501
        """TaskTemplateSchedule - a model defined in Swagger"""  # noqa: E501
        self._job_type = None
        self._frequency = None
        self._period = None
        self._time = None
        self._start_now = None
        self.discriminator = None
        self.job_type = job_type
        self.frequency = frequency
        self.period = period
        if time is not None:
            self.time = time
        if start_now is not None:
            self.start_now = start_now

    @property
    def job_type(self):
        """Gets the job_type of this TaskTemplateSchedule.  # noqa: E501


        :return: The job_type of this TaskTemplateSchedule.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this TaskTemplateSchedule.


        :param job_type: The job_type of this TaskTemplateSchedule.  # noqa: E501
        :type: str
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BACKUP", "MERGE"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def frequency(self):
        """Gets the frequency of this TaskTemplateSchedule.  # noqa: E501


        :return: The frequency of this TaskTemplateSchedule.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TaskTemplateSchedule.


        :param frequency: The frequency of this TaskTemplateSchedule.  # noqa: E501
        :type: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def period(self):
        """Gets the period of this TaskTemplateSchedule.  # noqa: E501


        :return: The period of this TaskTemplateSchedule.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this TaskTemplateSchedule.


        :param period: The period of this TaskTemplateSchedule.  # noqa: E501
        :type: str
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501
        allowed_values = ["MINUTES", "HOURS", "DAYS", "WEEKS", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def time(self):
        """Gets the time of this TaskTemplateSchedule.  # noqa: E501


        :return: The time of this TaskTemplateSchedule.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TaskTemplateSchedule.


        :param time: The time of this TaskTemplateSchedule.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def start_now(self):
        """Gets the start_now of this TaskTemplateSchedule.  # noqa: E501

        Whether the first repository of this task should be triggered immediately  # noqa: E501

        :return: The start_now of this TaskTemplateSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._start_now

    @start_now.setter
    def start_now(self, start_now):
        """Sets the start_now of this TaskTemplateSchedule.

        Whether the first repository of this task should be triggered immediately  # noqa: E501

        :param start_now: The start_now of this TaskTemplateSchedule.  # noqa: E501
        :type: bool
        """

        self._start_now = start_now

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTemplateSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTemplateSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
