# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TaskTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'task_type': 'str',
        'schedule': 'TaskTemplateSchedule',
        'options': 'TaskTemplateOptions',
        'full_backup': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'task_type': 'task_type',
        'schedule': 'schedule',
        'options': 'options',
        'full_backup': 'full_backup'
    }

    def __init__(self, name=None, task_type=None, schedule=None, options=None, full_backup=None):  # noqa: E501
        """TaskTemplate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._task_type = None
        self._schedule = None
        self._options = None
        self._full_backup = None
        self.discriminator = None
        self.name = name
        self.task_type = task_type
        self.schedule = schedule
        if options is not None:
            self.options = options
        if full_backup is not None:
            self.full_backup = full_backup

    @property
    def name(self):
        """Gets the name of this TaskTemplate.  # noqa: E501

        The task name  # noqa: E501

        :return: The name of this TaskTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskTemplate.

        The task name  # noqa: E501

        :param name: The name of this TaskTemplate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def task_type(self):
        """Gets the task_type of this TaskTemplate.  # noqa: E501


        :return: The task_type of this TaskTemplate.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskTemplate.


        :param task_type: The task_type of this TaskTemplate.  # noqa: E501
        :type: str
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BACKUP", "MERGE"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def schedule(self):
        """Gets the schedule of this TaskTemplate.  # noqa: E501


        :return: The schedule of this TaskTemplate.  # noqa: E501
        :rtype: TaskTemplateSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TaskTemplate.


        :param schedule: The schedule of this TaskTemplate.  # noqa: E501
        :type: TaskTemplateSchedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def options(self):
        """Gets the options of this TaskTemplate.  # noqa: E501


        :return: The options of this TaskTemplate.  # noqa: E501
        :rtype: TaskTemplateOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this TaskTemplate.


        :param options: The options of this TaskTemplate.  # noqa: E501
        :type: TaskTemplateOptions
        """

        self._options = options

    @property
    def full_backup(self):
        """Gets the full_backup of this TaskTemplate.  # noqa: E501

        If the task is a backup this is wheter or not it should perform a full backup.  # noqa: E501

        :return: The full_backup of this TaskTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._full_backup

    @full_backup.setter
    def full_backup(self, full_backup):
        """Sets the full_backup of this TaskTemplate.

        If the task is a backup this is wheter or not it should perform a full backup.  # noqa: E501

        :param full_backup: The full_backup of this TaskTemplate.  # noqa: E501
        :type: bool
        """

        self._full_backup = full_backup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
