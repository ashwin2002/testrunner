# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RepositoryCloudInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credentials_name': 'str',
        'staging_dir': 'str',
        'endpoint': 'str',
        'force_path_style': 'bool',
        'provider': 'str'
    }

    attribute_map = {
        'credentials_name': 'credentials_name',
        'staging_dir': 'staging_dir',
        'endpoint': 'endpoint',
        'force_path_style': 'force_path_style',
        'provider': 'provider'
    }

    def __init__(self, credentials_name=None, staging_dir=None, endpoint=None, force_path_style=None, provider=None):  # noqa: E501
        """RepositoryCloudInfo - a model defined in Swagger"""  # noqa: E501
        self._credentials_name = None
        self._staging_dir = None
        self._endpoint = None
        self._force_path_style = None
        self._provider = None
        self.discriminator = None
        if credentials_name is not None:
            self.credentials_name = credentials_name
        if staging_dir is not None:
            self.staging_dir = staging_dir
        if endpoint is not None:
            self.endpoint = endpoint
        if force_path_style is not None:
            self.force_path_style = force_path_style
        if provider is not None:
            self.provider = provider

    @property
    def credentials_name(self):
        """Gets the credentials_name of this RepositoryCloudInfo.  # noqa: E501

        The name given to the credentials. This can be used to get the credentials as well as updating and deleting them.  # noqa: E501

        :return: The credentials_name of this RepositoryCloudInfo.  # noqa: E501
        :rtype: str
        """
        return self._credentials_name

    @credentials_name.setter
    def credentials_name(self, credentials_name):
        """Sets the credentials_name of this RepositoryCloudInfo.

        The name given to the credentials. This can be used to get the credentials as well as updating and deleting them.  # noqa: E501

        :param credentials_name: The credentials_name of this RepositoryCloudInfo.  # noqa: E501
        :type: str
        """

        self._credentials_name = credentials_name

    @property
    def staging_dir(self):
        """Gets the staging_dir of this RepositoryCloudInfo.  # noqa: E501

        The location accessible by all nodes that is used to store temporary data whilst doing backups  # noqa: E501

        :return: The staging_dir of this RepositoryCloudInfo.  # noqa: E501
        :rtype: str
        """
        return self._staging_dir

    @staging_dir.setter
    def staging_dir(self, staging_dir):
        """Sets the staging_dir of this RepositoryCloudInfo.

        The location accessible by all nodes that is used to store temporary data whilst doing backups  # noqa: E501

        :param staging_dir: The staging_dir of this RepositoryCloudInfo.  # noqa: E501
        :type: str
        """

        self._staging_dir = staging_dir

    @property
    def endpoint(self):
        """Gets the endpoint of this RepositoryCloudInfo.  # noqa: E501

        If one is given this overrides the default endpoint used for the given cloud store provider. This can be used when you are using a S3 compatible store for example.  # noqa: E501

        :return: The endpoint of this RepositoryCloudInfo.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this RepositoryCloudInfo.

        If one is given this overrides the default endpoint used for the given cloud store provider. This can be used when you are using a S3 compatible store for example.  # noqa: E501

        :param endpoint: The endpoint of this RepositoryCloudInfo.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def force_path_style(self):
        """Gets the force_path_style of this RepositoryCloudInfo.  # noqa: E501

        With S3 it will force using the old path style.  # noqa: E501

        :return: The force_path_style of this RepositoryCloudInfo.  # noqa: E501
        :rtype: bool
        """
        return self._force_path_style

    @force_path_style.setter
    def force_path_style(self, force_path_style):
        """Sets the force_path_style of this RepositoryCloudInfo.

        With S3 it will force using the old path style.  # noqa: E501

        :param force_path_style: The force_path_style of this RepositoryCloudInfo.  # noqa: E501
        :type: bool
        """

        self._force_path_style = force_path_style

    @property
    def provider(self):
        """Gets the provider of this RepositoryCloudInfo.  # noqa: E501

        Defines which cloud provider is being used, at the moment only AWS is supported.  # noqa: E501

        :return: The provider of this RepositoryCloudInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RepositoryCloudInfo.

        Defines which cloud provider is being used, at the moment only AWS is supported.  # noqa: E501

        :param provider: The provider of this RepositoryCloudInfo.  # noqa: E501
        :type: str
        """

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryCloudInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryCloudInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
