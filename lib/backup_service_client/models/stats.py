# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Stats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'transfers': 'list[Transfer]'
    }

    attribute_map = {
        'id': 'id',
        'transfers': 'transfers'
    }

    def __init__(self, id=None, transfers=None):  # noqa: E501
        """Stats - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._transfers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if transfers is not None:
            self.transfers = transfers

    @property 
    def backup(self):
        for transfer in reversed(self.transfers):
            if transfer.backup: 
                return transfer.backup
        return None

    @property
    def id(self):
        """Gets the id of this Stats.  # noqa: E501


        :return: The id of this Stats.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stats.


        :param id: The id of this Stats.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def transfers(self):
        """Gets the transfers of this Stats.  # noqa: E501


        :return: The transfers of this Stats.  # noqa: E501
        :rtype: list[Transfer]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this Stats.


        :param transfers: The transfers of this Stats.  # noqa: E501
        :type: list[Transfer]
        """

        self._transfers = transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

