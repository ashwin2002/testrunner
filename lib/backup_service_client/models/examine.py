# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Examine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup': 'str',
        'sequence_number': 'int',
        'key': 'str',
        'value': 'dict(str, object)',
        'metadata': 'ExamineMetadata',
        'deleted': 'bool'
    }

    attribute_map = {
        'backup': 'backup',
        'sequence_number': 'sequence_number',
        'key': 'key',
        'value': 'value',
        'metadata': 'metadata',
        'deleted': 'deleted'
    }

    def __init__(self, backup=None, sequence_number=None, key=None, value=None, metadata=None, deleted=None):  # noqa: E501
        """Examine - a model defined in Swagger"""  # noqa: E501
        self._backup = None
        self._sequence_number = None
        self._key = None
        self._value = None
        self._metadata = None
        self._deleted = None
        self.discriminator = None
        if backup is not None:
            self.backup = backup
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if key is not None:
            self.key = key
        if value is not None:
            self.value = value
        if metadata is not None:
            self.metadata = metadata
        if deleted is not None:
            self.deleted = deleted

    @property
    def backup(self):
        """Gets the backup of this Examine.  # noqa: E501


        :return: The backup of this Examine.  # noqa: E501
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this Examine.


        :param backup: The backup of this Examine.  # noqa: E501
        :type: str
        """

        self._backup = backup

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Examine.  # noqa: E501


        :return: The sequence_number of this Examine.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Examine.


        :param sequence_number: The sequence_number of this Examine.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def key(self):
        """Gets the key of this Examine.  # noqa: E501


        :return: The key of this Examine.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Examine.


        :param key: The key of this Examine.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this Examine.  # noqa: E501


        :return: The value of this Examine.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Examine.


        :param value: The value of this Examine.  # noqa: E501
        :type: dict(str, object)
        """

        self._value = value

    @property
    def metadata(self):
        """Gets the metadata of this Examine.  # noqa: E501


        :return: The metadata of this Examine.  # noqa: E501
        :rtype: ExamineMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Examine.


        :param metadata: The metadata of this Examine.  # noqa: E501
        :type: ExamineMetadata
        """

        self._metadata = metadata

    @property
    def deleted(self):
        """Gets the deleted of this Examine.  # noqa: E501


        :return: The deleted of this Examine.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Examine.


        :param deleted: The deleted of this Examine.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Examine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Examine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
