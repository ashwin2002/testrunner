# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExamineMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flags': 'int',
        'expiry': 'int',
        'locktime': 'int',
        'cas': 'int',
        'revseqno': 'int',
        'datatype': 'int'
    }

    attribute_map = {
        'flags': 'flags',
        'expiry': 'expiry',
        'locktime': 'locktime',
        'cas': 'cas',
        'revseqno': 'revseqno',
        'datatype': 'datatype'
    }

    def __init__(self, flags=None, expiry=None, locktime=None, cas=None, revseqno=None, datatype=None):  # noqa: E501
        """ExamineMetadata - a model defined in Swagger"""  # noqa: E501
        self._flags = None
        self._expiry = None
        self._locktime = None
        self._cas = None
        self._revseqno = None
        self._datatype = None
        self.discriminator = None
        if flags is not None:
            self.flags = flags
        if expiry is not None:
            self.expiry = expiry
        if locktime is not None:
            self.locktime = locktime
        if cas is not None:
            self.cas = cas
        if revseqno is not None:
            self.revseqno = revseqno
        if datatype is not None:
            self.datatype = datatype

    @property
    def flags(self):
        """Gets the flags of this ExamineMetadata.  # noqa: E501


        :return: The flags of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ExamineMetadata.


        :param flags: The flags of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._flags = flags

    @property
    def expiry(self):
        """Gets the expiry of this ExamineMetadata.  # noqa: E501


        :return: The expiry of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ExamineMetadata.


        :param expiry: The expiry of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._expiry = expiry

    @property
    def locktime(self):
        """Gets the locktime of this ExamineMetadata.  # noqa: E501


        :return: The locktime of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._locktime

    @locktime.setter
    def locktime(self, locktime):
        """Sets the locktime of this ExamineMetadata.


        :param locktime: The locktime of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._locktime = locktime

    @property
    def cas(self):
        """Gets the cas of this ExamineMetadata.  # noqa: E501


        :return: The cas of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._cas

    @cas.setter
    def cas(self, cas):
        """Sets the cas of this ExamineMetadata.


        :param cas: The cas of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._cas = cas

    @property
    def revseqno(self):
        """Gets the revseqno of this ExamineMetadata.  # noqa: E501


        :return: The revseqno of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._revseqno

    @revseqno.setter
    def revseqno(self, revseqno):
        """Sets the revseqno of this ExamineMetadata.


        :param revseqno: The revseqno of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._revseqno = revseqno

    @property
    def datatype(self):
        """Gets the datatype of this ExamineMetadata.  # noqa: E501


        :return: The datatype of this ExamineMetadata.  # noqa: E501
        :rtype: int
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this ExamineMetadata.


        :param datatype: The datatype of this ExamineMetadata.  # noqa: E501
        :type: int
        """

        self._datatype = datatype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExamineMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExamineMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
