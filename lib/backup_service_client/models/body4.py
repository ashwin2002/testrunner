# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_backup': 'bool'
    }

    attribute_map = {
        'full_backup': 'full_backup'
    }

    def __init__(self, full_backup=None):  # noqa: E501
        """Body4 - a model defined in Swagger"""  # noqa: E501
        self._full_backup = None
        self.discriminator = None
        if full_backup is not None:
            self.full_backup = full_backup

    @property
    def full_backup(self):
        """Gets the full_backup of this Body4.  # noqa: E501

        Whether or not the backup should be a full  # noqa: E501

        :return: The full_backup of this Body4.  # noqa: E501
        :rtype: bool
        """
        return self._full_backup

    @full_backup.setter
    def full_backup(self, full_backup):
        """Sets the full_backup of this Body4.

        Whether or not the backup should be a full  # noqa: E501

        :param full_backup: The full_backup of this Body4.  # noqa: E501
        :type: bool
        """

        self._full_backup = full_backup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
