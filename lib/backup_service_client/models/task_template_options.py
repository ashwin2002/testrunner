# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TaskTemplateOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset_start': 'int',
        'offset_end': 'Interger'
    }

    attribute_map = {
        'offset_start': 'offset_start',
        'offset_end': 'offset_end'
    }

    def __init__(self, offset_start=None, offset_end=None):  # noqa: E501
        """TaskTemplateOptions - a model defined in Swagger"""  # noqa: E501
        self._offset_start = None
        self._offset_end = None
        self.discriminator = None
        if offset_start is not None:
            self.offset_start = offset_start
        if offset_end is not None:
            self.offset_end = offset_end

    @property
    def offset_start(self):
        """Gets the offset_start of this TaskTemplateOptions.  # noqa: E501

        The start offset from the current data to start the merge  # noqa: E501

        :return: The offset_start of this TaskTemplateOptions.  # noqa: E501
        :rtype: int
        """
        return self._offset_start

    @offset_start.setter
    def offset_start(self, offset_start):
        """Sets the offset_start of this TaskTemplateOptions.

        The start offset from the current data to start the merge  # noqa: E501

        :param offset_start: The offset_start of this TaskTemplateOptions.  # noqa: E501
        :type: int
        """

        self._offset_start = offset_start

    @property
    def offset_end(self):
        """Gets the offset_end of this TaskTemplateOptions.  # noqa: E501

        The end offset relative from the start date to end the merge  # noqa: E501

        :return: The offset_end of this TaskTemplateOptions.  # noqa: E501
        :rtype: Interger
        """
        return self._offset_end

    @offset_end.setter
    def offset_end(self, offset_end):
        """Sets the offset_end of this TaskTemplateOptions.

        The end offset relative from the start date to end the merge  # noqa: E501

        :param offset_end: The offset_end of this TaskTemplateOptions.  # noqa: E501
        :type: Interger
        """

        self._offset_end = offset_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTemplateOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTemplateOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
