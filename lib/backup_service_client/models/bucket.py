# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Bucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size': 'int',
        'items': 'int',
        'mutations': 'int',
        'tombstones': 'int',
        'views_count': 'int',
        'fts_count': 'int',
        'index_count': 'int',
        'analytics_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'items': 'items',
        'mutations': 'mutations',
        'tombstones': 'tombstones',
        'views_count': 'views_count',
        'fts_count': 'fts_count',
        'index_count': 'index_count',
        'analytics_count': 'analytics_count'
    }

    def __init__(self, name=None, size=None, items=None, mutations=None, tombstones=None, views_count=None, fts_count=None, index_count=None, analytics_count=None):  # noqa: E501
        """Bucket - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._size = None
        self._items = None
        self._mutations = None
        self._tombstones = None
        self._views_count = None
        self._fts_count = None
        self._index_count = None
        self._analytics_count = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if items is not None:
            self.items = items
        if mutations is not None:
            self.mutations = mutations
        if tombstones is not None:
            self.tombstones = tombstones
        if views_count is not None:
            self.views_count = views_count
        if fts_count is not None:
            self.fts_count = fts_count
        if index_count is not None:
            self.index_count = index_count
        if analytics_count is not None:
            self.analytics_count = analytics_count

    @property
    def name(self):
        """Gets the name of this Bucket.  # noqa: E501


        :return: The name of this Bucket.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bucket.


        :param name: The name of this Bucket.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Bucket.  # noqa: E501


        :return: The size of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Bucket.


        :param size: The size of this Bucket.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def items(self):
        """Gets the items of this Bucket.  # noqa: E501


        :return: The items of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Bucket.


        :param items: The items of this Bucket.  # noqa: E501
        :type: int
        """

        self._items = items

    @property
    def mutations(self):
        """Gets the mutations of this Bucket.  # noqa: E501


        :return: The mutations of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._mutations

    @mutations.setter
    def mutations(self, mutations):
        """Sets the mutations of this Bucket.


        :param mutations: The mutations of this Bucket.  # noqa: E501
        :type: int
        """

        self._mutations = mutations

    @property
    def tombstones(self):
        """Gets the tombstones of this Bucket.  # noqa: E501


        :return: The tombstones of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._tombstones

    @tombstones.setter
    def tombstones(self, tombstones):
        """Sets the tombstones of this Bucket.


        :param tombstones: The tombstones of this Bucket.  # noqa: E501
        :type: int
        """

        self._tombstones = tombstones

    @property
    def views_count(self):
        """Gets the views_count of this Bucket.  # noqa: E501


        :return: The views_count of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._views_count

    @views_count.setter
    def views_count(self, views_count):
        """Sets the views_count of this Bucket.


        :param views_count: The views_count of this Bucket.  # noqa: E501
        :type: int
        """

        self._views_count = views_count

    @property
    def fts_count(self):
        """Gets the fts_count of this Bucket.  # noqa: E501


        :return: The fts_count of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._fts_count

    @fts_count.setter
    def fts_count(self, fts_count):
        """Sets the fts_count of this Bucket.


        :param fts_count: The fts_count of this Bucket.  # noqa: E501
        :type: int
        """

        self._fts_count = fts_count

    @property
    def index_count(self):
        """Gets the index_count of this Bucket.  # noqa: E501


        :return: The index_count of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._index_count

    @index_count.setter
    def index_count(self, index_count):
        """Sets the index_count of this Bucket.


        :param index_count: The index_count of this Bucket.  # noqa: E501
        :type: int
        """

        self._index_count = index_count

    @property
    def analytics_count(self):
        """Gets the analytics_count of this Bucket.  # noqa: E501


        :return: The analytics_count of this Bucket.  # noqa: E501
        :rtype: int
        """
        return self._analytics_count

    @analytics_count.setter
    def analytics_count(self, analytics_count):
        """Sets the analytics_count of this Bucket.


        :param analytics_count: The analytics_count of this Bucket.  # noqa: E501
        :type: int
        """

        self._analytics_count = analytics_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
