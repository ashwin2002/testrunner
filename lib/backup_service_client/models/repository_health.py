# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RepositoryHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healthy': 'bool',
        'health_issue': 'str'
    }

    attribute_map = {
        'healthy': 'healthy',
        'health_issue': 'health_issue'
    }

    def __init__(self, healthy=None, health_issue=None):  # noqa: E501
        """RepositoryHealth - a model defined in Swagger"""  # noqa: E501
        self._healthy = None
        self._health_issue = None
        self.discriminator = None
        if healthy is not None:
            self.healthy = healthy
        if health_issue is not None:
            self.health_issue = health_issue

    @property
    def healthy(self):
        """Gets the healthy of this RepositoryHealth.  # noqa: E501

        Wheter the repository is healthy or not  # noqa: E501

        :return: The healthy of this RepositoryHealth.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this RepositoryHealth.

        Wheter the repository is healthy or not  # noqa: E501

        :param healthy: The healthy of this RepositoryHealth.  # noqa: E501
        :type: bool
        """

        self._healthy = healthy

    @property
    def health_issue(self):
        """Gets the health_issue of this RepositoryHealth.  # noqa: E501

        A message describing the health issue  # noqa: E501

        :return: The health_issue of this RepositoryHealth.  # noqa: E501
        :rtype: str
        """
        return self._health_issue

    @health_issue.setter
    def health_issue(self, health_issue):
        """Sets the health_issue of this RepositoryHealth.

        A message describing the health issue  # noqa: E501

        :param health_issue: The health_issue of this RepositoryHealth.  # noqa: E501
        :type: str
        """

        self._health_issue = health_issue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
