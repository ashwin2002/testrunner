# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Info(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size': 'int',
        'count': 'int',
        'backups': 'list[Backup]'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'count': 'count',
        'backups': 'backups'
    }

    def __init__(self, name=None, size=None, count=None, backups=None):  # noqa: E501
        """Info - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._size = None
        self._count = None
        self._backups = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if count is not None:
            self.count = count
        if backups is not None:
            self.backups = backups

    @property
    def name(self):
        """Gets the name of this Info.  # noqa: E501

        The hidden name of the repo.  # noqa: E501

        :return: The name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Info.

        The hidden name of the repo.  # noqa: E501

        :param name: The name of this Info.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Info.  # noqa: E501

        The total size in bytes of all the backups.  # noqa: E501

        :return: The size of this Info.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Info.

        The total size in bytes of all the backups.  # noqa: E501

        :param size: The size of this Info.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def count(self):
        """Gets the count of this Info.  # noqa: E501

        The number of backups.  # noqa: E501

        :return: The count of this Info.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Info.

        The number of backups.  # noqa: E501

        :param count: The count of this Info.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def backups(self):
        """Gets the backups of this Info.  # noqa: E501


        :return: The backups of this Info.  # noqa: E501
        :rtype: list[Backup]
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this Info.


        :param backups: The backups of this Info.  # noqa: E501
        :type: list[Backup]
        """

        self._backups = backups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Info, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
