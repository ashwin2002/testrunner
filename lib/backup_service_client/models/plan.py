# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Plan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'services': 'list[Services]',
        'default': 'bool',
        'tasks': 'list[TaskTemplate]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'services': 'services',
        'default': 'default',
        'tasks': 'tasks'
    }

    def __init__(self, name=None, description=None, services=None, default=None, tasks=None):  # noqa: E501
        """Plan - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._services = None
        self._default = None
        self._tasks = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if services is not None:
            self.services = services
        if default is not None:
            self.default = default
        if tasks is not None:
            self.tasks = tasks

    def recalculate_task_by_name(self, task_name, start_time):
        self.find_task_by_name(task_name).schedule.recalculate(start_time)

    def recalculate_all(self, start_time):
        for task in self.tasks:
            task.schedule.recalculate(start_time)

    def find_task_by_name(self, task_name):
        """ Finds a task by name
        """
        for task in self.tasks:
            if task.name == task_name:
                return task

    def expected_next_run_time(self, start_time):
        """ Gets the next expected task and its expected run time
        """
        return min((task.schedule.expected_time, task) for task in self.tasks)

    @property
    def name(self):
        """Gets the name of this Plan.  # noqa: E501

        The plan name  # noqa: E501

        :return: The name of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.

        The plan name  # noqa: E501

        :param name: The name of this Plan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Plan.  # noqa: E501

        An optional description of the plan  # noqa: E501

        :return: The description of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Plan.

        An optional description of the plan  # noqa: E501

        :param description: The description of this Plan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def services(self):
        """Gets the services of this Plan.  # noqa: E501

        The services to backup. If left empty all services are backed up.  # noqa: E501

        :return: The services of this Plan.  # noqa: E501
        :rtype: list[Services]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Plan.

        The services to backup. If left empty all services are backed up.  # noqa: E501

        :param services: The services of this Plan.  # noqa: E501
        :type: list[Services]
        """

        self._services = services

    @property
    def default(self):
        """Gets the default of this Plan.  # noqa: E501

        If thge plan is one of the default ones  # noqa: E501

        :return: The default of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Plan.

        If thge plan is one of the default ones  # noqa: E501

        :param default: The default of this Plan.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def tasks(self):
        """Gets the tasks of this Plan.  # noqa: E501

        The task this plan will do  # noqa: E501

        :return: The tasks of this Plan.  # noqa: E501
        :rtype: list[TaskTemplate]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this Plan.

        The task this plan will do  # noqa: E501

        :param tasks: The tasks of this Plan.  # noqa: E501
        :type: list[TaskTemplate]
        """

        self._tasks = tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Plan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
