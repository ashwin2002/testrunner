# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'imported': 'dict(str, Repository)',
        'archived': 'dict(str, Repository)',
        'active': 'dict(str, Repository)'
    }

    attribute_map = {
        'name': 'name',
        'imported': 'imported',
        'archived': 'archived',
        'active': 'active'
    }

    def __init__(self, name=None, imported=None, archived=None, active=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._imported = None
        self._archived = None
        self._active = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if imported is not None:
            self.imported = imported
        if archived is not None:
            self.archived = archived
        if active is not None:
            self.active = active

    @property
    def name(self):
        """Gets the name of this InlineResponse200.  # noqa: E501

        The cluster name  # noqa: E501

        :return: The name of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200.

        The cluster name  # noqa: E501

        :param name: The name of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def imported(self):
        """Gets the imported of this InlineResponse200.  # noqa: E501

        A map of imported repository name to repository  # noqa: E501

        :return: The imported of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, Repository)
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this InlineResponse200.

        A map of imported repository name to repository  # noqa: E501

        :param imported: The imported of this InlineResponse200.  # noqa: E501
        :type: dict(str, Repository)
        """

        self._imported = imported

    @property
    def archived(self):
        """Gets the archived of this InlineResponse200.  # noqa: E501

        A map of archived repository name to repository  # noqa: E501

        :return: The archived of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, Repository)
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this InlineResponse200.

        A map of archived repository name to repository  # noqa: E501

        :param archived: The archived of this InlineResponse200.  # noqa: E501
        :type: dict(str, Repository)
        """

        self._archived = archived

    @property
    def active(self):
        """Gets the active of this InlineResponse200.  # noqa: E501

        A map of active repository name to repository  # noqa: E501

        :return: The active of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, Repository)
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse200.

        A map of active repository name to repository  # noqa: E501

        :param active: The active of this InlineResponse200.  # noqa: E501
        :type: dict(str, Repository)
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
