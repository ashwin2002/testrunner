# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Backup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'type': 'str',
        'source': 'str',
        'events': 'int',
        'fts_alias': 'int',
        'size': 'int',
        'buckets': 'list[Bucket]',
        'complete': 'bool'
    }

    attribute_map = {
        '_date': 'date',
        'type': 'type',
        'source': 'source',
        'events': 'events',
        'fts_alias': 'fts_alias',
        'size': 'size',
        'buckets': 'buckets',
        'complete': 'complete'
    }

    def __init__(self, _date=None, type=None, source=None, events=None, fts_alias=None, size=None, buckets=None, complete=None):  # noqa: E501
        """Backup - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._type = None
        self._source = None
        self._events = None
        self._fts_alias = None
        self._size = None
        self._buckets = None
        self._complete = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if type is not None:
            self.type = type
        if source is not None:
            self.source = source
        if events is not None:
            self.events = events
        if fts_alias is not None:
            self.fts_alias = fts_alias
        if size is not None:
            self.size = size
        if buckets is not None:
            self.buckets = buckets
        if complete is not None:
            self.complete = complete

    @property
    def _date(self):
        """Gets the _date of this Backup.  # noqa: E501


        :return: The _date of this Backup.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Backup.


        :param _date: The _date of this Backup.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def type(self):
        """Gets the type of this Backup.  # noqa: E501


        :return: The type of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Backup.


        :param type: The type of this Backup.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def source(self):
        """Gets the source of this Backup.  # noqa: E501


        :return: The source of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Backup.


        :param source: The source of this Backup.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def events(self):
        """Gets the events of this Backup.  # noqa: E501


        :return: The events of this Backup.  # noqa: E501
        :rtype: int
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Backup.


        :param events: The events of this Backup.  # noqa: E501
        :type: int
        """

        self._events = events

    @property
    def fts_alias(self):
        """Gets the fts_alias of this Backup.  # noqa: E501


        :return: The fts_alias of this Backup.  # noqa: E501
        :rtype: int
        """
        return self._fts_alias

    @fts_alias.setter
    def fts_alias(self, fts_alias):
        """Sets the fts_alias of this Backup.


        :param fts_alias: The fts_alias of this Backup.  # noqa: E501
        :type: int
        """

        self._fts_alias = fts_alias

    @property
    def size(self):
        """Gets the size of this Backup.  # noqa: E501


        :return: The size of this Backup.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Backup.


        :param size: The size of this Backup.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def buckets(self):
        """Gets the buckets of this Backup.  # noqa: E501


        :return: The buckets of this Backup.  # noqa: E501
        :rtype: list[Bucket]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this Backup.


        :param buckets: The buckets of this Backup.  # noqa: E501
        :type: list[Bucket]
        """

        self._buckets = buckets

    @property
    def complete(self):
        """Gets the complete of this Backup.  # noqa: E501


        :return: The complete of this Backup.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Backup.


        :param complete: The complete of this Backup.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Backup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Backup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
