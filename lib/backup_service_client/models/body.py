# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'data_path': 'str',
        'backups': 'str'
    }

    attribute_map = {
        'key': 'key',
        'data_path': 'data_path',
        'backups': 'backups'
    }

    def __init__(self, key=None, data_path=None, backups=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._data_path = None
        self._backups = None
        self.discriminator = None
        self.key = key
        self.data_path = data_path
        if backups is not None:
            self.backups = backups

    @property
    def key(self):
        """Gets the key of this Body.  # noqa: E501

        The key to search for  # noqa: E501

        :return: The key of this Body.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Body.

        The key to search for  # noqa: E501

        :param key: The key of this Body.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def data_path(self):
        """Gets the data_path of this Body.  # noqa: E501

        The data path to search the key under  # noqa: E501

        :return: The data_path of this Body.  # noqa: E501
        :rtype: str
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path):
        """Sets the data_path of this Body.

        The data path to search the key under  # noqa: E501

        :param data_path: The data_path of this Body.  # noqa: E501
        :type: str
        """
        if data_path is None:
            raise ValueError("Invalid value for `data_path`, must not be `None`")  # noqa: E501

        self._data_path = data_path

    @property
    def backups(self):
        """Gets the backups of this Body.  # noqa: E501

        The backups to search on  # noqa: E501

        :return: The backups of this Body.  # noqa: E501
        :rtype: str
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """Sets the backups of this Body.

        The backups to search on  # noqa: E501

        :param backups: The backups of this Body.  # noqa: E501
        :type: str
        """

        self._backups = backups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
