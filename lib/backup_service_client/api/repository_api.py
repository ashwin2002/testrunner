# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from backup_service_client.api_client import ApiClient


class RepositoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cluster_self_repository_state_get(self, state, **kwargs):  # noqa: E501
        """Get all the repositories in the specific cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_get(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_get_with_http_info(state, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_get_with_http_info(state, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_get_with_http_info(self, state, **kwargs):  # noqa: E501
        """Get all the repositories in the specific cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_get_with_http_info(state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_delete(self, state, id, **kwargs):  # noqa: E501
        """Deletes the requested repository. Archived repositories cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_delete(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: (required)
        :param bool remove_repository:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_delete_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_delete_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_delete_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """Deletes the requested repository. Archived repositories cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_delete_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: (required)
        :param bool remove_repository:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id', 'remove_repository']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'remove_repository' in params:
            query_params.append(('remove_repository', params['remove_repository']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_examine_post(self, state, id, **kwargs):  # noqa: E501
        """The result of running examine on the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_examine_post(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param Body body:
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_examine_post_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_examine_post_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_examine_post_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """The result of running examine on the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_examine_post_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param Body body:
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_examine_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_examine_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_examine_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}/examine', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_get(self, state, id, **kwargs):  # noqa: E501
        """Get the requested repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_get(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_get_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_get_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_get_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """Get the requested repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_get_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_info_get(self, state, id, **kwargs):  # noqa: E501
        """Gets the information for the repository repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_info_get(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param int limit: maximum number of backups to return
        :param int offset: backups to skip
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_info_get_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_info_get_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_info_get_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """Gets the information for the repository repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_info_get_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param int limit: maximum number of backups to return
        :param int offset: backups to skip
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_info_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_restore_post(self, state, id, **kwargs):  # noqa: E501
        """Restores the repository data to a target cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_restore_post(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param Body1 body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_restore_post_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_restore_post_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_restore_post_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """Restores the repository data to a target cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_restore_post_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param Body1 body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_restore_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_self_repository_state_id_task_history_get(self, state, id, **kwargs):  # noqa: E501
        """Get the task history for the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_task_history_get(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param str first: Time in RFC3399Nano format
        :param int limit: maximum number of elements to return
        :param str task_name: Returns only results for entries with the matching task name
        :param int offset: Used together with limit to achieve pagination
        :return: TaskRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_self_repository_state_id_task_history_get_with_http_info(state, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_self_repository_state_id_task_history_get_with_http_info(state, id, **kwargs)  # noqa: E501
            return data

    def cluster_self_repository_state_id_task_history_get_with_http_info(self, state, id, **kwargs):  # noqa: E501
        """Get the task history for the repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_self_repository_state_id_task_history_get_with_http_info(state, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: The repository state (required)
        :param str id: The repository ID. (required)
        :param str first: Time in RFC3399Nano format
        :param int limit: maximum number of elements to return
        :param str task_name: Returns only results for entries with the matching task name
        :param int offset: Used together with limit to achieve pagination
        :return: TaskRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'id', 'first', 'limit', 'task_name', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_self_repository_state_id_task_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cluster_self_repository_state_id_task_history_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cluster_self_repository_state_id_task_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'task_name' in params:
            query_params.append(('taskName', params['task_name']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/self/repository/{state}/{id}/taskHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
